#!/usr/bin/env bash

set -euo pipefail

function help() {
  echo "                                                                                "
  echo "* Usage:                                                                        "
  echo "    s3qlw_init [[flag argument]...]                                             "
  echo "                                                                                "
  echo "* Flags:                                                                        "
  echo "    Mandatory:                                                                  "
  echo "        -a [authfile-location]                                                  "
  echo "        -d [mount-directory]                                                    "
  echo "        -s [storage-url]                                                        "
  echo "        -l [lockfile]                                                           "
  echo "    Optional:                                                                   "
  echo "        -c [cacheopts]                                                          "
  echo "                                                                                "
  echo "* Arguments: (? = optional)                                                     "
  echo "                                                                                "
  echo "    [authfile-location] The location of the authentication file to install to   "
  echo "                        ~/.s3ql/authinfo2 with mode 0600                        "
  echo "                                                                                "
  echo "      [mount-directory] The directory (in the container) that should be passed  "
  echo "                        as mount point when invoking mount.s3ql                 "
  echo "                                                                                "
  echo "           [cacheopts]? Cache options to pass to mount.s3ql, in the format      "
  echo "                        <path>:<size in KiB>                                    "
  echo "                        Invoking s3qlw_init ... -c /cache:10                    "
  echo "                        Triggers mount.s3ql --cachedir /cache --cachesize 10    "
  echo "                                                                                "
  echo "        [lockfile-path] A file location (relative to [mount-directory]), where  "
  echo "                        an empty file will be created on mount and deleted      "
  echo "                        before unmounting.                                      "
  echo "                                                                                "
  echo "          [storage-url] s3ql-formatted (s3://..., s3c://...) storage url        "
  echo "                                                                                "
  echo "                                                                                "
  echo "* Environment variables:                                                        "
  echo "                                                                                "
  echo "    UNSAFE_S3QL_IGNORE_LOCKFILE_ON_START:                                       "
  echo "        When set to true, tells the init script to proceed even if a lockfile   "
  echo "        already exists. This allows relatively easy recovery if you are         "
  echo "        confident in the safety of doing so.                                    "
  echo "        Note: s3ql additionally has its own checks, which this doesn't bypass.  "
  echo "                                                                                "
}

function warn_unset_arg() {
  echo "Error: $1 was not set!"
  help
}

function separator() {
  echo "**************************"
}

function exec_with_setx() {
  # we do actually want array splitting here
  # shellcheck disable=SC2068
  (
    set -x
    $@
  )
}

function cleanup() {
  echo ""
  separator
  echo "Received exit signal. Cleaning up and exiting."

  echo ""
  echo "Deleting lockfile..."
  rm -v "$MOUNT_DIRECTORY/$LOCKFILE_PATH"
  echo ""

  echo ""
  echo "Unmounting bucket..."
  exec_with_setx umount.s3ql "$MOUNT_DIRECTORY"
  echo ""

  exit 0
}

if [ "${1:-}" == "-h" ]; then
  help
  exit 0
fi

separator
echo "Invoked with [ $* ]:"

while getopts "a:d:c:l:s:" opt; do
  case "${opt}" in
    a)
      AUTHFILE_LOCATION="${OPTARG}"
      echo " - authfile-location: [$AUTHFILE_LOCATION]"
      ;;
    d)
      MOUNT_DIRECTORY="${OPTARG}"
      echo " - mount-directory: [$MOUNT_DIRECTORY]"
      ;;
    l)
      LOCKFILE_PATH="${OPTARG}"
      echo " - lockfile-path: [$LOCKFILE_PATH]"
      ;;
    s)
      STORAGE_URL="${OPTARG}"
      echo " - storage-url: [$STORAGE_URL]"
      ;;
    c)
      CACHEOPTS=${OPTARG}
      echo " - cacheopts: [$CACHEOPTS]"
      ;;
    :)
      echo "Error: -${OPTARG} requires an argument."
      help
      exit 1
      ;;
    *)
      help
      exit 1
      ;;
  esac
done
echo ""

separator
echo "Validating arguments"
echo ""

if [ -z "${AUTHFILE_LOCATION:-}" ]; then
  warn_unset_arg "authfile-location"
  exit 1
fi
if [ -z "${MOUNT_DIRECTORY:-}" ]; then
  warn_unset_arg "mount-directory"
  exit 1
fi
if [ -z "${LOCKFILE_PATH:-}" ]; then
  warn_unset_arg "lockfile-path"
  exit 1
fi
if [ -z "${STORAGE_URL:-}" ]; then
  warn_unset_arg "storage-url"
  exit 1
fi

CACHE_ARGS=()
if [ -n "${CACHEOPTS:-}" ]; then
  echo "Received cache configuration overrides: [$CACHEOPTS]"

  CACHE_PATH="$(echo "${CACHEOPTS}" | cut -d ':' -f1)"
  echo "Cache path: [$CACHE_PATH]"
  [ -d "$CACHE_PATH" ] || mkdir -pv "$CACHE_PATH"
  CACHE_ARGS+=("--cachedir $CACHE_PATH")

  CACHE_SIZE="$(echo "${CACHEOPTS}" | cut -d ':' -f2)"
  echo "Cache size: [$CACHE_SIZE] KiB"
  CACHE_ARGS+=("--cachesize $CACHE_SIZE")
fi

echo "Arguments are valid"
echo ""

separator
echo "Installing authfile..."
s3qlw_import_authfile "$AUTHFILE_LOCATION"
echo ""

separator
echo "Creating mountpoint folder if absent..."
if ! [ -d "$MOUNT_DIRECTORY" ]; then
  exec_with_setx mkdir -v "$MOUNT_DIRECTORY"
fi
echo ""

separator
echo "Mounting bucket at mount-point..."
exec_with_setx mount.s3ql --allow-other "${CACHE_ARGS[@]}" "$STORAGE_URL" "$MOUNT_DIRECTORY"
echo ""

separator
echo "Creating lockfile if absent"
if [ -f "$MOUNT_DIRECTORY/$LOCKFILE_PATH" ]; then
  echo "***"
  echo "WARNING. A LOCKFILE WAS ALREADY PRESENT AT [$LOCKFILE_PATH] WITHIN BUCKET"
  echo ""
  echo "This could indicate either that another client is already connect, or that"
  echo "there was a client that was shutdown non-gracefully. If it is the latter,"
  echo "make sure to follow recovery steps on S3QL's wiki."
  echo "***"

  if [ "${UNSAFE_S3QL_IGNORE_LOCKFILE_ON_START:-false}" == "true" ]; then
    echo "UNSAFE_S3QL_IGNORE_LOCKFILE_ON_START was set to true. Bypassing lockfile."
  else
    echo "Bailing."
    exit 1
  fi
else
  exec_with_setx echo "$(date +%s) | Host: $HOSTNAME | PID: $$" > "$MOUNT_DIRECTORY/$LOCKFILE_PATH"
fi
echo ""

separator
echo "Setting up graceful exit handler"
trap cleanup TERM INT
echo ""

separator
echo "S3QL-Docker ($(mkfs.s3ql --version)) started successfully!"

while true; do
  tail -f /dev/null &
  wait ${!}
done
