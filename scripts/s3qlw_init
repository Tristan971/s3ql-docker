#!/usr/bin/env bash

set -euo pipefail

function help() {
  echo ""
  echo "Usage:"
  echo ""
  echo "    s3qlw_init"
  echo "        -a [authfile-location]"
  echo "        -d [mount-directory]"
  echo "        -l [lockfile]"
  echo "        -s [storage-url]"
  echo ""
  echo "Parameters:"
  echo ""
  echo "    [authfile-location] The location of the authentication file to install to"
  echo "                        ~/.s3ql/authinfo2 with mode 0600"
  echo ""
  echo "      [mount-directory] The directory (in the container) that should be passed"
  echo "                        as mount point when invoking mount.s3ql"
  echo ""
  echo "        [lockfile-path] A file location (relative to [mount-directory]), where"
  echo "                        an empty file will be created on mount and deleted"
  echo "                        before unmounting. It allows detecting/blocking multiple"
  echo "                        s3ql clients from existing, and detect unexpected loss"
  echo "                        of connectivity, as well as S3 mount being ready for use"
  echo ""
  echo "          [storage-url] s3ql-formatted (s3://..., s3c://...) storage url"
  echo ""
  echo ""
  echo "Environment variables:"
  echo ""
  echo "    UNSAFE_S3QL_IGNORE_LOCKFILE_ON_START When set to \"true\", tells the init"
  echo "                                         script to proceed even if a lockfile"
  echo "                                         already exists. This allows relatively"
  echo "                                         easy recovery if you are onfident in the"
  echo "                                         safety of doing so."
  echo ""
}

function warn_unset_arg() {
  echo "Error: $1 was not set!"
  help
}

function cleanup() {
  echo ""
  echo "Received exit signal. Cleaning up and exiting."
  s3qlw_terminate -d "$MOUNT_DIRECTORY" -l "$LOCKFILE_PATH"
  exit 0
}

if [ "${1:-}" == "-h" ]; then
  help
  exit 0
fi

while getopts "a:d:l:s:" opt; do
  case "${opt}" in
    a)
      AUTHFILE_LOCATION="${OPTARG}"
      echo "- authfile-location: [$AUTHFILE_LOCATION]"
      ;;
    d)
      MOUNT_DIRECTORY="${OPTARG}"
      echo "- mount-directory: [$MOUNT_DIRECTORY]"
      ;;
    l)
      LOCKFILE_PATH="${OPTARG}"
      echo "- lockfile-path: [$LOCKFILE_PATH]"
      ;;
    s)
      STORAGE_URL="${OPTARG}"
      echo "- storage-url: [$STORAGE_URL]"
      ;;
    :)
      echo "Error: -${OPTARG} requires an argument."
      help
      exit 1
      ;;
    *)
      help
      exit 1
      ;;
  esac
done

if [ -z "${AUTHFILE_LOCATION:-}" ]; then
  warn_unset_arg "authfile-location"
  exit 1
fi
if [ -z "${MOUNT_DIRECTORY:-}" ]; then
  warn_unset_arg "mount-directory"
  exit 1
fi
if [ -z "${LOCKFILE_PATH:-}" ]; then
  warn_unset_arg "lockfile-path"
  exit 1
fi
if [ -z "${LOCKFILE_PATH:-}" ]; then
  warn_unset_arg "storage-url"
  exit 1
fi

echo ""
echo "Installing authfile..."
s3qlw_import_authfile "$AUTHFILE_LOCATION"
echo ""

echo ""
echo "Creating mountpoint folder if absent..."
if ! [ -d "$MOUNT_DIRECTORY" ]; then
  mkdir -v "$MOUNT_DIRECTORY"
fi
echo ""

echo ""
echo "Mounting bucket at mount-point..."
s3qlw_mount "$STORAGE_URL" "$MOUNT_DIRECTORY"
echo ""

echo ""
echo "Creating lockfile if absent"
if [ -f "$MOUNT_DIRECTORY/$LOCKFILE_PATH" ]; then
  echo "***"
  echo "WARNING. A LOCKFILE WAS ALREADY PRESENT AT [$LOCKFILE_PATH] WITHIN BUCKET"
  echo ""
  echo "This could indicate either that another client is already connect, or that"
  echo "there was a client that was shutdown non-gracefully. If it is the latter,"
  echo "make sure to follow recovery steps on S3QL's wiki."
  echo "***"

  if [ "${UNSAFE_S3QL_IGNORE_LOCKFILE_ON_START:-false}" == "true" ]; then
    echo "UNSAFE_S3QL_IGNORE_LOCKFILE_ON_START was set to true. Bypassing lockfile."
  else
    echo "Bailing."
    exit 1
  fi
else
  echo "$(date +%s) | Host: $HOSTNAME | PID: $$" | tee "$MOUNT_DIRECTORY/$LOCKFILE_PATH"
fi
echo ""

echo ""
echo "Setting up graceful exit handler"
trap cleanup TERM
trap cleanup INT
trap cleanup HUP
trap cleanup EXIT
echo ""

echo ""
echo "S3QL-Docker ($(mkfs.s3ql --version)) started successfully!"
tail -f /dev/null
